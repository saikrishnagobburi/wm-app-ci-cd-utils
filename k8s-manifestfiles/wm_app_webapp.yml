---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-conf-APP_NAME
  labels: 
    app: wm-app-APP_NAME
data:
  fluent.conf: |
    # AUTOMATICALLY GENERATED
    # DO NOT EDIT THIS FILE DIRECTLY, USE /templates/conf/fluent.conf.erb
    # this file location /fluentd/etc/fluent.conf

    @include "#{ENV['FLUENTD_SYSTEMD_CONF'] || 'systemd'}.conf"
    @include "#{ENV['FLUENTD_PROMETHEUS_CONF'] || 'prometheus'}.conf"
    @include kubernetes.conf
    @include conf.d/*.conf

    <match **>
      @type elasticsearch
      @id out_es
      @log_level info
      include_tag_key true
      host "#{ENV['FLUENT_ELASTICSEARCH_HOST']}"
      port "#{ENV['FLUENT_ELASTICSEARCH_PORT']}"
      path "#{ENV['FLUENT_ELASTICSEARCH_PATH']}"
      scheme "#{ENV['FLUENT_ELASTICSEARCH_SCHEME'] || 'http'}"
      ssl_verify "#{ENV['FLUENT_ELASTICSEARCH_SSL_VERIFY'] || 'true'}"
      ssl_version "#{ENV['FLUENT_ELASTICSEARCH_SSL_VERSION'] || 'TLSv1_2'}"
      user "#{ENV['FLUENT_ELASTICSEARCH_USER'] || use_default}"
      password "#{ENV['FLUENT_ELASTICSEARCH_PASSWORD'] || use_default}"
      reload_connections "#{ENV['FLUENT_ELASTICSEARCH_RELOAD_CONNECTIONS'] || 'false'}"
      reconnect_on_error "#{ENV['FLUENT_ELASTICSEARCH_RECONNECT_ON_ERROR'] || 'true'}"
      reload_on_failure "#{ENV['FLUENT_ELASTICSEARCH_RELOAD_ON_FAILURE'] || 'true'}"
      log_es_400_reason "#{ENV['FLUENT_ELASTICSEARCH_LOG_ES_400_REASON'] || 'false'}"
      logstash_prefix "#{ENV['FLUENT_ELASTICSEARCH_LOGSTASH_PREFIX'] || 'APP_NAME'}"
      logstash_dateformat "#{ENV['FLUENT_ELASTICSEARCH_LOGSTASH_DATEFORMAT'] || '%Y.%m.%d'}"
      # logstash_format "#{ENV['FLUENT_ELASTICSEARCH_LOGSTASH_FORMAT'] || 'true'}"
      logstash_format true
      index_name "#{ENV['FLUENT_ELASTICSEARCH_LOGSTASH_INDEX_NAME'] || 'APP_NAME'}"
      type_name "#{ENV['FLUENT_ELASTICSEARCH_LOGSTASH_TYPE_NAME'] || 'fluentd'}"
      include_timestamp "#{ENV['FLUENT_ELASTICSEARCH_INCLUDE_TIMESTAMP'] || 'true'}"
      template_name "#{ENV['FLUENT_ELASTICSEARCH_TEMPLATE_NAME'] || use_nil}"
      template_file "#{ENV['FLUENT_ELASTICSEARCH_TEMPLATE_FILE'] || use_nil}"
      template_overwrite "#{ENV['FLUENT_ELASTICSEARCH_TEMPLATE_OVERWRITE'] || use_default}"
      sniffer_class_name "#{ENV['FLUENT_SNIFFER_CLASS_NAME'] || 'Fluent::Plugin::ElasticsearchSimpleSniffer'}"
      request_timeout "#{ENV['FLUENT_ELASTICSEARCH_REQUEST_TIMEOUT'] || '5s'}"
      <buffer>
        flush_thread_count "#{ENV['FLUENT_ELASTICSEARCH_BUFFER_FLUSH_THREAD_COUNT'] || '8'}"
        flush_interval "#{ENV['FLUENT_ELASTICSEARCH_BUFFER_FLUSH_INTERVAL'] || '5s'}"
        chunk_limit_size "#{ENV['FLUENT_ELASTICSEARCH_BUFFER_CHUNK_LIMIT_SIZE'] || '2M'}"
        queue_limit_length "#{ENV['FLUENT_ELASTICSEARCH_BUFFER_QUEUE_LIMIT_LENGTH'] || '32'}"
        retry_max_interval "#{ENV['FLUENT_ELASTICSEARCH_BUFFER_RETRY_MAX_INTERVAL'] || '30'}"
        retry_forever true
      </buffer>
    </match>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubernetes-conf-APP_NAME
  labels: 
    app: wm-app-APP_NAME
data:
  kubernetes.conf: |
    # AUTOMATICALLY GENERATED
    # DO NOT EDIT THIS FILE DIRECTLY, USE /templates/conf/kubernetes.conf.erb
    # this file location /fluentd/etc/kubernetes.conf
    # /usr/local/tomcat/logs
    <label @FLUENT_LOG>
      <match fluent.**>
        @type null
      </match>
    </label>

    <source>
      @type tail
      #@id in_tail_container_logs
      path /var/log/containers/wmapp/catalina.*.log
      pos_file /var/log/wmappcatalina-fluentd-containers.log.pos
      tag appcatalina
      read_from_head true
      <parse>
        @type multiline # "#{ENV['FLUENT_CONTAINER_TAIL_PARSER_TYPE'] || 'json'}"
        format_firstline /[0-9]{2}-[A-Za-z]{3}-[0-9]{4}/
        format1 /^(?<datetime>[0-9]{2}-[A-Za-z]{3}-[0-9]{4} [0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}) (?<log-level>[^ ]*) \[(?<thread>.*)\] (?<classname>[^ ]*) (?<message>.*)$/
        time_format %Y-%m-%dT%H:%M:%S.%NZ
      </parse>
    </source>

    <source>
      @type tail
      #@id in_tail_container_logs
      path /var/log/containers/wmapp/manager.*.log
      pos_file /var/log/wmappmanager-fluentd-containers.log.pos
      tag appmanager
      read_from_head true
      <parse>
        @type multiline # "#{ENV['FLUENT_CONTAINER_TAIL_PARSER_TYPE'] || 'json'}"
        format_firstline /[0-9]{2}-[A-Za-z]{3}-[0-9]{4}/
        format1 /^(?<datetime>[0-9]{2}-[A-Za-z]{3}-[0-9]{4} [0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}) (?<log-level>[^ ]*) \[(?<thread>.*)\] (?<classname>[^ ]*) (?<message>.*)$/
        time_format %Y-%m-%dT%H:%M:%S.%NZ
      </parse>
    </source>

    <source>
      @type tail
      #@id in_tail_container_logs
      path /var/log/containers/wmapp/localhost.*.log
      pos_file /var/log/wmapplocalhost-fluentd-containers.log.pos
      tag applocalhost
      read_from_head true
      <parse>
        @type multiline # "#{ENV['FLUENT_CONTAINER_TAIL_PARSER_TYPE'] || 'json'}"
        format_firstline /[0-9]{2}-[A-Za-z]{3}-[0-9]{4}/
        format1 /^(?<datetime>[0-9]{2}-[A-Za-z]{3}-[0-9]{4} [0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}) (?<log-level>[^ ]*) \[(?<thread>.*)\] (?<classname>[^ ]*) (?<message>.*)$/
        time_format %Y-%m-%dT%H:%M:%S.%NZ
      </parse>
    </source>

    <source>
      @type tail
      #@id in_tail_container_logs
      path /var/log/containers/wmapp/localhost_access_log.*.txt
      pos_file /var/log/localhostaccess-fluentd-containers.log.pos
      tag applocalhostaccess
      read_from_head true
      format nginx
    </source>

---
apiVersion: v1
kind: Service
metadata:
  name: wmappsvc-APP_NAME
spec:
  type: ClusterIP
  selector:
     app: wm-app-APP_NAME
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: webservice-APP_NAME
  labels:
    wmappp: wmNodePort
spec:
  type: NodePort
  selector:
    app: wm-app-APP_NAME
  ports:
  - port: 8080
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wmapp-APP_NAME
  labels:
    app: wm-app-APP_NAME
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wm-app-APP_NAME
  template:
    metadata:
      labels:
        app: wm-app-APP_NAME
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '8080'
        prometheus.io/scheme: 'http'
    spec:
      serviceAccount: fluentd
      serviceAccountName: fluentd
      tolerations: 
      - key: "spotInstance" 
        operator: "Equal" 
        value: "true" 
        effect: "PreferNoSchedule"
      affinity:
        nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              preference:
                matchExpressions:
                - key: lifecycle
                  operator: In
                  values:
                  - Ec2Spot
      containers:
      - name: wmapp
        image: CONTAINER_IMAGE
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        - containerPort: 22
        resources:
          requests:
            memory: "1024Mi"
            cpu: "200m"
          limits:
            memory: "2048Mi"
            cpu: "500m"
        env:
        - name: wm.mysqlCloudHost
          valueFrom:
              configMapKeyRef:
                key: wm.mysqlCloudHost
                name: wmapp-config-APP_NAME
        - name: wm.mysqlCloudUsername
          valueFrom:
              configMapKeyRef:
                key: wm.mysqlCloudUsername
                name: wmapp-config-APP_NAME
        - name: wm.mysqlCloudPassword
          valueFrom:
              secretKeyRef:
                key: MYSQL_ROOT_PASSWORD
                name: mysqlsecret-APP_NAME
        volumeMounts:
          - name:  applicationlogs-APP_NAME
            mountPath: /usr/local/tomcat/logs
      - name: fluentd
        image: fluent/fluentd-kubernetes-daemonset:v1-debian-elasticsearch
        env:
          - name:  FLUENT_ELASTICSEARCH_HOST
            value: "elasticsearch-client.wm-apps.svc.cluster.local"
          - name:  FLUENT_ELASTICSEARCH_PORT
            value: "9200"
          - name: FLUENT_ELASTICSEARCH_SCHEME
            value: "http"
          # Option to configure elasticsearch plugin with self signed certs
          # ================================================================
          - name: FLUENT_ELASTICSEARCH_SSL_VERIFY
            value: "true"
          # Option to configure elasticsearch plugin with tls
          # ================================================================
          - name: FLUENT_ELASTICSEARCH_SSL_VERSION
            value: "TLSv1_2"
          # X-Pack Authentication
          # =====================
          - name: FLUENT_ELASTICSEARCH_USER
            value: "elastic"
          - name: FLUENT_ELASTICSEARCH_PASSWORD
            value: "changeme"
          # Logz.io Authentication
          # ======================
          - name: LOGZIO_TOKEN
            value: "ThisIsASuperLongToken"
          - name: LOGZIO_LOGTYPE
            value: "kubernetes"
        resources:
          limits:
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: applicationlogs-APP_NAME
          mountPath: /var/log/containers/wmapp/
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: kubernetesconf
          mountPath: /fluentd/etc/kubernetes.conf
          subPath: kubernetes.conf
        - name: fluentdconf
          mountPath: /fluentd/etc/fluent.conf
          subPath: fluent.conf
      terminationGracePeriodSeconds: 30
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: kubernetesconf
        configMap:
          name: kubernetes-conf-APP_NAME
      - name: fluentdconf
        configMap:
          name: fluentd-conf-APP_NAME
      - name: applicationlogs-APP_NAME
        emptyDir: {}